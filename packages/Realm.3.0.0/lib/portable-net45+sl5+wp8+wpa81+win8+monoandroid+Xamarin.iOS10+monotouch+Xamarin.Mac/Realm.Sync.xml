<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Realm.Sync</name>
    </assembly>
    <members>
        <member name="T:Realms.Sync.UserInfo">
            <summary>
            An object containing information about a user's identity in Realm's authentication system.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.Identity">
            <summary>
            Gets the identity of the user in Realm's system. Equivalent to <see cref="P:Realms.Sync.User.Identity"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.IsAdmin">
            <summary>
            Gets a value indicating whether the user is a Realm Object Server administrator user. Equivalent to <see cref="P:Realms.Sync.User.IsAdmin"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.Accounts">
            <summary>
            Gets a collection of all the user accounts associated with the user.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.Metadata">
            <summary>
            Gets the metadata about this user stored on the Realm Object Server.
            </summary>
        </member>
        <member name="T:Realms.Sync.AccountInfo">
            <summary>
            An object containing information about an account associated with a user.
            </summary>
        </member>
        <member name="P:Realms.Sync.AccountInfo.Provider">
            <summary>
            Gets the provider that manages this user account.
            </summary>
        </member>
        <member name="P:Realms.Sync.AccountInfo.ProviderUserIdentity">
            <summary>
            Gets the user account's identity in the provider's system.
            </summary>
        </member>
        <member name="T:Realms.Sync.Exceptions.IncompatibleSyncedFileException">
            <summary>
            An exception thrown when attempting to open an incompatible Synchronized Realm file. This usually happens
            when the Realm file was created with an older version of the SDK and automatic migration to the current version
            is not possible. When such an exception occurs, the original file is moved to a backup location and a new file is
            created instead. If you wish to migrate any data from the backup location, you can use <see cref="M:Realms.Sync.Exceptions.IncompatibleSyncedFileException.GetBackupRealmConfig(System.Byte[])"/>
            to obtain a <see cref="T:Realms.RealmConfigurationBase"/> that can then be used to open the backup Realm. After that, retry
            opening the original Realm file (which now should be recreated as an empty file) and copy all data from the backup
            file to the new one.
            </summary>
            <example>
            <code>
            var syncConfig = new SyncConfiguration(user, serverUri);
            try
            {
                var realm = Realm.GetInstance(syncConfig);
                // Do something if call was successful.
            }
            catch (IncompatibleSyncedFileException ex)
            {
                var backupConfig = ex.GetBackupRealmConfig();
                var backupRealm = Realm.GetInstance(backupConfig);
                var realm = Realm.GetInstance(syncConfig);
                realm.Write(() =>
                {
                    foreach (var item in backupRealm.All("MyItem"))
                    {
                        realm.Add(new MyItem
                        {
                            Value = item.Value,
                            ...
                        });
                    }
                });
            }
            </code>
            </example>
        </member>
        <member name="M:Realms.Sync.Exceptions.IncompatibleSyncedFileException.GetBackupRealmConfig(System.Byte[])">
            <summary>
            Gets a <see cref="T:Realms.RealmConfigurationBase"/> instance that can be used to open the backup Realm file.
            </summary>
            <param name="encryptionKey">Optional encryption key that was used to encrypt the original Realm file.</param>
            <returns>A configuration object for the backup Realm.</returns>
        </member>
        <member name="T:Realms.Sync.Exceptions.PermissionDeniedException">
            <summary>
            An error that indicates the user does not have permission to perform an operation
            upon a synced Realm. For example, a user may receive this error if they attempt to
            open a Realm they do not have at least read access to, or write to a Realm they only
            have read access to.
            <para />
            This error may also occur if a user incorrectly opens a Realm they have read-only
            permissions to without using the <see cref="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase)"/> API.
            A Realm that suffers a permission denied error is, by default, flagged so that its
            local copy will be deleted the next time the application starts.
            <para />
            The <see cref="T:Realms.Sync.Exceptions.PermissionDeniedException"/> exposes a method that
            can be called with a single argument: <c>true</c> to immediately delete the Realm file,
            or <c>false</c> to not delete the file at all (either now or upon restart). This method
            should only be called with <c>true</c> if and when your app disposes of every
            instance of the offending Realm on all threads.
            </summary>
        </member>
        <member name="M:Realms.Sync.Exceptions.PermissionDeniedException.DeleteRealmUserInfo(System.Boolean)">
            <summary>
            A method that can be called to manually initiate or cancel the Realm file deletion process. If the method
            isn't called at all, the Realm file will be deleted the next time your application is launched and the
            sync subsystem is initialized. Can only be called once.
            </summary>
            <param name="deleteRealm">Controls whether to initiate deletion immediately or cancel it altogether.</param>
            <returns><c>true</c> if actions were run successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Realms.Sync.Exceptions.ClientResetException">
            <summary>
            An exception describing a condition where a reset of the local Realm is required.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.ClientResetException.BackupFilePath">
            <summary>
            Gets the path where the backup copy of the realm will be placed once the client reset process is complete.
            </summary>
            <value>The path to the backup realm.</value>
        </member>
        <member name="M:Realms.Sync.Exceptions.ClientResetException.InitiateClientReset">
            <summary>
            Initiates the client reset process.
            </summary>
            <returns><c>true</c> if actions were run successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Realms.Sync.Exceptions.AuthenticationException">
            <summary>
            An exception thrown when an error has occurred during authentication. It usually indicates a logical problem
            with the request that can be investigated by inspecting the <see cref="P:Realms.Sync.Exceptions.AuthenticationException.ErrorCode"/> property.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.AuthenticationException.ErrorCode">
            <summary>
            Gets the <see cref="P:Realms.Sync.Exceptions.AuthenticationException.ErrorCode"/> of the error.
            </summary>
            <value>An enum value indicating the error code.</value>
        </member>
        <member name="T:Realms.Sync.Exceptions.ErrorCode">
            <summary>
            Error code enumeration, indicating the type of the error.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.Unknown">
            <summary>
            Unrecognized error code. It usually indicates incompatibility between the authentication server and client SDK versions.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.SessionClosed">
            <summary>
            Session has been closed (no error).
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.OtherSessionError">
            <summary>
            Other session level error has occurred.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AccessTokenExpired">
            <summary>
            Access token has already expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadUserAuthentication">
            <summary>
            Failed to authenticate user.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.IllegalRealmPath">
            <summary>
            Path to Realm is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.NoSuchRealm">
            <summary>
            Path points to non-existing Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.PermissionDenied">
            <summary>
            Permission to Realm has been denied.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadServerFileIdentifier">
            <summary>
            The server file identifier is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadClientFileIdentifier">
            <summary>
            The client file identifier is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadServerVersion">
            <summary>
            The server version is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadClientVersion">
            <summary>
            The client version is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.DivergingHistories">
            <summary>
            Histories have diverged and cannot be merged.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadChangeset">
            <summary>
            The changeset is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.DisabledSession">
            <summary>
            The session has been disabled.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidParameters">
            <summary>
            Your request parameters did not validate.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.MissingParameters">
            <summary>
            Your request did not validate because of missing parameters.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidCredentials">
            <summary>
            The provided credentials are invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.UnknownAccount">
            <summary>
            The account does not exist.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExistingAccount">
            <summary>
            The account cannot be registered as it exists already.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AccessDenied">
            <summary>
            The path is invalid or current user has no access.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExpiredRefreshToken">
            <summary>
            The refresh token is expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidHost">
            <summary>
            The server is not authoritative for this URL.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExpiredPermissionOffer">
            <summary>
            The permission offer is expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AmbiguousPermissionOfferToken">
            <summary>
            The token used on the permission request does match more than a single permission offer.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.FileMayNotBeShared">
            <summary>
            The Realm file at the specified path is not available for shared access.
            </summary>
        </member>
        <member name="T:Realms.Sync.Exceptions.ErrorCodeExtensions">
            <summary>
            A set of extensions that simplify checking for common error scenarios.
            </summary>
        </member>
        <member name="M:Realms.Sync.Exceptions.ErrorCodeExtensions.IsClientResetError(Realms.Sync.Exceptions.ErrorCode)">
            <summary>
            Checks if an error code indicates that a client reset is needed.
            </summary>
            <returns><c>true</c>, if the code indicates a client reset error, <c>false</c> otherwise.</returns>
            <param name="code">The error code.</param>
        </member>
        <member name="T:Realms.Sync.Exceptions.HttpException">
            <summary>
            An exception thrown when a transport error occurs during authentication.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.HttpException.StatusCode">
            <summary>
            Gets the <see cref="T:System.Net.HttpStatusCode"/> of the response.
            </summary>
            <value>A well known <see cref="T:System.Net.HttpStatusCode"/>.</value>
        </member>
        <member name="P:Realms.Sync.Exceptions.HttpException.ReasonPhrase">
            <summary>
            Gets the Reason-Phrase of the HTTP response.
            </summary>
            <value>The Reason-Phrase of the HTTP response.</value>
        </member>
        <member name="P:Realms.Sync.Exceptions.HttpException.Payload">
            <summary>
            Gets the body of the HTTP response.
            </summary>
            <value>The body of the HTTP response.</value>
        </member>
        <member name="T:Realms.Sync.Exceptions.SessionException">
            <summary>
            An exception type that describes a session-level error condition.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.SessionException.ErrorCode">
            <summary>
            Gets the error code that describes the session error this exception represents.
            </summary>
            <value>An enum value, providing more detailed information for the cause of the error.</value>
        </member>
        <member name="T:Realms.Sync.Exceptions.PermissionException">
            <summary>
            An exception thrown when an error has occurred when changing permissions of a Realm.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.PermissionException.ErrorCode">
            <summary>
            Gets the <see cref="P:Realms.Sync.Exceptions.PermissionException.ErrorCode"/> of the error.
            </summary>
            <value>An enum value indicating the error code.</value>
        </member>
        <member name="T:Realms.Sync.LogLevel">
            <summary>
            Specifies the criticality level above which messages will be logged
            by the default sync client logger.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.All">
            <summary>
            Log everything. This will seriously harm the performance of the
            sync client and should never be used in production scenarios.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Trace">
            <summary>
            A version of 'debug' that allows for very high volume output.
            This may seriously affect the performance of the sync client.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Debug">
            <summary>
            Reveal information that can aid debugging, no longer paying
            attention to efficiency.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Detail">
            <summary>
            Same as 'Info', but prioritize completeness over minimalism.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Info">
            <summary>
            Log operational sync client messages, but in a minimalistic fashion to
            avoid general overhead from logging and to keep volume down.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Warn">
            <summary>
            Log errors and warnings.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Error">
            <summary>
            Log errors only.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Fatal">
            <summary>
            Log only fatal errors.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Off">
            <summary>
            Log nothing.
            </summary>
        </member>
        <member name="T:Realms.Sync.ClassPermission">
            <summary>
            An object which describes class-wide permissions.
            </summary>
            <remarks>
            An instance of this object is automatically created in the Realm for class in your schema,
            and should not be created manually. Call <see cref="M:Realms.Sync.ClassPermission.Get``1(Realms.Realm)"/> or
            <see cref="M:Realms.Sync.ClassPermission.Get(Realms.Realm,System.String)"/> to obtain the existing instance, or query
            <see cref="T:Realms.Sync.ClassPermission"/> as normal.
            </remarks>
        </member>
        <member name="P:Realms.Sync.ClassPermission.Name">
            <summary>
            Gets the name of the class which these permissions apply to.
            </summary>
        </member>
        <member name="P:Realms.Sync.ClassPermission.Permissions">
            <summary>
            Gets the permissions for this class.
            </summary>
        </member>
        <member name="M:Realms.Sync.ClassPermission.Get``1(Realms.Realm)">
            <summary>
            Retrieves the <see cref="T:Realms.Sync.ClassPermission"/> for the given
            <see cref="T:Realms.RealmObject"/> subclass. This will return <c>null</c> for non-partial Realms.
            </summary>
            <typeparam name="T">
            The <see cref="T:Realms.RealmObject"/> subclass whose corresponding <see cref="T:Realms.Sync.ClassPermission"/>
            will be obtained.
            </typeparam>
            <param name="realm">The Realm instance.</param>
            <returns>
            A <c>ClassPermission</c> instance that allows you to manipulate the permissions
            for this class.
            </returns>
        </member>
        <member name="M:Realms.Sync.ClassPermission.Get(Realms.Realm,System.String)">
            <summary>
            Retrieves the <see cref="T:Realms.Sync.ClassPermission"/> for the given class name.
            This will return <c>null</c> for non-partial Realms.
            </summary>
            <param name="realm">The Realm instance.</param>
            <param name="className">
            The name of a <see cref="T:Realms.RealmObject"/> subclass whose corresponding <see cref="T:Realms.Sync.ClassPermission"/>
            will be obtained.
            </param>
            <returns>
            A <c>ClassPermission</c> instance that allows you to manipulate the permissions
            for this class.
            </returns>
        </member>
        <member name="T:Realms.Sync.ClassPrivileges">
            <summary>
            A description of the actual privileges which apply to a Class within a Realm.
            </summary>
            <remarks>
            This is a combination of all of the privileges granted to all of the Roles which the
            current User is a member of, obtained by calling <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,System.String)"/>
            or <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges``1(Realms.Realm)"/>.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Read">
            <summary>
            If this flag is not present, the current User is not permitted to see objects of this type,
            and attempting to query this class will always return empty results.
            </summary>
            <remarks>
            Note that Read permissions are transitive, and so it may be possible to read an
            object which the user does not directly have Read permissions for by following a
            link to it from an object they do have Read permissions for. This does not apply
            to any of the other permission types.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Update">
            <summary>
            If this flag is not present, no modifications to objects of this type are permitted. Write
            transactions modifying the objects can be performed locally, but any changes made
            will be reverted by the server.
            </summary>
            <remarks>
            Deleting an object is considered a modification, and is governed by this privilege.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.SetPermissions">
            <summary>
            If this flag is not present, no modifications to the permissions property of the <see cref="T:Realms.Sync.ClassPermission"/>
            object for this type are permitted. Write transactions can be performed locally,
            but any changes made will be reverted by the server.
            </summary>
            <remarks>
            Note that if invalid privilege changes are made, <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges``1(Realms.Realm)"/>
            will return results reflecting those invalid changes until synchronization occurs.
            <para/>
            Even if this flag is present, note that the user will be unable to grant more
            privileges to a Role than what they have themselves, e.g. they won't be able to grant
            <see cref="F:Realms.Sync.ClassPrivileges.Update"/> if they haven't been granted <see cref="F:Realms.Sync.ClassPrivileges.Update"/> first.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Subscribe">
            <summary>
            If this flag is not present, the User is not permitted to create new subscriptions for this class.
            Local queries against the objects within the Realm will work, but new
            subscriptions will never add objects to the Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Create">
            <summary>
            If this flag is not present, creating new objects of this type is not permitted. Write transactions
            creating objects can be performed locally, but the objects will be deleted by the
            server when synchronization occurs.
            </summary>
            <remarks>
            For objects with Primary Keys, it may not be locally determinable if <see cref="F:Realms.Sync.ClassPrivileges.Create"/> or
            <see cref="F:Realms.Sync.ClassPrivileges.Update"/> privileges are applicable. It may appear that you are creating a new object,
            but an object with that Primary Key may already exist and simply not be visible to
            you, in which case it is actually an Update operation.
            </remarks>
        </member>
        <member name="T:Realms.Sync.ObjectPrivileges">
            <summary>
            A description of the actual privileges which apply to a specific Object.
            </summary>
            <remarks>
            This is a combination of all of the privileges granted to all of the Roles which the
            current User is a member of, obtained by calling <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,Realms.RealmObject)"/>
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.Read">
            <summary>
            If this flag is not present, the current User is not permitted to read this object directly.
            </summary>
            <remarks>
            Note that Read permissions are transitive, and so it may be possible to read an
            object which the user does not directly have Read permissions for by following a
            link to it from an object they do have Read permissions for. This does not apply
            to any of the other permission types.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.Update">
            <summary>
            If this flag is not present, modifying the fields of this type is not permitted. Write
            transactions modifying the objects can be performed locally, but any changes made
            will be reverted by the server.
            </summary>
            <remarks>
            Note that even if the user has <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> permission, they may not be able to
            modify the <c>IList&lt;Permission&gt;</c> property of the object (if it exists), as that is
            governed by <see cref="F:Realms.Sync.ObjectPrivileges.SetPermissions"/>.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.Delete">
            <summary>
            If this flag is not present, deleting this object is not permitted. Write transactions which
            delete the object can be performed locally, but the server will restore it.
            </summary>
            <remarks>
            It is possible to have <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> but not <see cref="F:Realms.Sync.ObjectPrivileges.Delete"/> privileges, or vice
            versa. For objects with primary keys, <see cref="F:Realms.Sync.ObjectPrivileges.Delete"/> but not <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> is ill-advised
            as an object can be updated by deleting and recreating it.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.SetPermissions">
            <summary>
            If this flag is not present, modifying the privileges of this specific object is not permitted.
            </summary>
            <remarks>
            Object-specific permissions are set by declaring an <c>IList&lt;Permission&gt;</c>
            property on the <see cref="T:Realms.RealmObject"/> subclass. Modifications to this property are
            controlled by <see cref="F:Realms.Sync.ObjectPrivileges.SetPermissions"/> rather than <see cref="F:Realms.Sync.ObjectPrivileges.Update"/>.
            <para/>
            Even if this flag is present, note that the user will be unable to grant more
            privileges to a Role than what they have themselves, e.g. they won't be able to grant
            <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> if they haven't been granted <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> first.
            </remarks>
        </member>
        <member name="T:Realms.Sync.Permission">
            <summary>
            A permission which can be applied to a Realm, Class, or specific Object.
            </summary>
            <remarks>
            Permissions are applied by adding the permission to the <see cref="T:Realms.Sync.RealmPermission"/> singleton
            object, the <see cref="T:Realms.Sync.ClassPermission"/> object for the desired class, or to a user-defined
            <c>IList&lt;Permission&gt;</c> property on a specific Object instance. The meaning of each of
            the properties of <see cref="T:Realms.Sync.Permission"/> depend on what the permission is applied to, and so are
            left undocumented here. See <see cref="T:Realms.Sync.RealmPrivileges"/>, <see cref="T:Realms.Sync.ClassPrivileges"/>, and
            <see cref="T:Realms.Sync.ObjectPrivileges"/> for details about what each of the properties mean when applied to
            that type.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.Role">
            <summary>
            Gets the Role which this Permission applies to. All users within the Role are
            granted the permissions specified by the fields below any
            objects/classes/realms which use this <see cref="T:Realms.Sync.Permission"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanRead">
            <summary>
            Gets or sets a value indicating whether the user can read the object to which this
            <see cref="T:Realms.Sync.Permission"/> is attached.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanUpdate">
            <summary>
            Gets or sets a value indicating whether the user can modify the object to which this <see cref="T:Realms.Sync.Permission"/> is attached.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanDelete">
            <summary>
            Gets or sets a value indicating whether the user can delete the object to which this <see cref="T:Realms.Sync.Permission"/> is attached.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Objects, and not to Realms or Classes.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.CanSetPermissions">
            <summary>
            Gets or sets a value indicating whether the user can add or modify Permissions for the object which this
            <see cref="T:Realms.Sync.Permission"/> is attached to.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanQuery">
            <summary>
            Gets or sets a value indicating whether the user can subscribe to queries for this object type.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Classes, and not to Realms or Objects.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.CanCreate">
            <summary>
            Gets or sets a value indicating whether the user can create new objects of the type this <see cref="T:Realms.Sync.Permission"/> is attached to.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Classes, and not to Realms or Objects.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.CanModifySchema">
            <summary>
            Gets or sets a value indicating whether the user can modify the schema of the Realm which this
            <see cref="T:Realms.Sync.Permission"/> is attached to.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Realms, and not to Realms or Objects.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the Realm.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the Realm, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="realm">The Realm whose permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the Realm
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get``1(Realms.Sync.PermissionRole,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <typeparam name="T">
            The <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </typeparam>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="className">
            The  name of the <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,Realms.RealmObject)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the object.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            <para/>
            The given object must have a <c>IList&lt;Permission&gt;</c> property defined on it.
            If more than one such property exists, the first one will be used.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="obj">
            The <see cref="T:Realms.RealmObject"/> inheritor whose permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the Realm.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the Realm, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="realm">The Realm whose permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the Realm
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get``1(System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <typeparam name="T">
            The <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </typeparam>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="className">
            The  name of the <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,Realms.RealmObject)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the object.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            <para/>
            The given object must have a <c>IList&lt;Permission&gt;</c> property defined on it.
            If more than one such property exists, the first one will be used.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="obj">
            The <see cref="T:Realms.RealmObject"/> inheritor whose permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,System.Collections.Generic.IList{Realms.Sync.Permission})">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the collection.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="permissions">
            The collection of permissions to which the new instance will be added.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,System.Collections.Generic.IList{Realms.Sync.Permission})">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the collection.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="permissions">
            The collection of permissions to which the new instance will be added.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="T:Realms.Sync.PermissionRole">
            <summary>
            A Role within the permissions system.
            </summary>
            <remarks>
            A Role consists of a name for the role and a list of users which are members of the role.
            Roles are granted privileges on Realms, Classes and Objects, and in turn grant those
            privileges to all users which are members of the role.
            <para/>
            A role named "everyone" is automatically created in new Realms, and all new users which
            connect to the Realm are automatically added to it. Any other roles you wish to use are
            managed as normal Realm objects.
            </remarks>
        </member>
        <member name="P:Realms.Sync.PermissionRole.Name">
            <summary>
            Gets the name of the Role.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionRole.Users">
            <summary>
            Gets the users which belong to the role.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionRole.Get(Realms.Realm,System.String)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.PermissionRole"/> in the provided Realm.
            </summary>
            <param name="realm">The Realm where the Role will be created.</param>
            <param name="roleName">The name of the Role.</param>
            <returns>
            A <see cref="T:Realms.Sync.PermissionRole"/> instance that can be inspected or manipulated.
            </returns>
        </member>
        <member name="T:Realms.Sync.PermissionUser">
            <summary>
            A representation of a sync user within the permissions system.
            </summary>
            <remarks>
            <see cref="T:Realms.Sync.PermissionUser"/> objects are created automatically for each sync user which connects
            to a Realm, and can also be created manually if you wish to grant permissions to a user
            which has not yet connected to this Realm.
            </remarks>
        </member>
        <member name="P:Realms.Sync.PermissionUser.Identity">
            <summary>
            Gets the unique Realm Object Server user ID string identifying this user. This will have
            the same value as <see cref="P:Realms.Sync.User.Identity"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionUser.Role">
            <summary>
            Gets the user's private role. This will be initialized to a role named for the user's
            identity that contains this user as its only member.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionUser.Roles">
            <summary>
            Gets the Roles which this user belongs to.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionUser.Get(Realms.Realm,System.String)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.PermissionUser"/> with the specified identity.
            </summary>
            <param name="realm">The Realm instance.</param>
            <param name="identity">The Realm Object Server user ID.</param>
            <returns>
            A <see cref="T:Realms.Sync.PermissionUser"/> instance that can be added to one or more <see cref="T:Realms.Sync.PermissionRole"/>s.
            </returns>
        </member>
        <member name="T:Realms.Sync.RealmPermission">
            <summary>
            A singleton object which describes Realm-wide permissions.
            </summary>
            <remarks>
            An object of this type is automatically created in the Realm for you, and more objects
            cannot be created manually. Call <see cref="M:Realms.Sync.RealmPermission.Get(Realms.Realm)"/> to obtain the
            instance for a specific Realm.
            </remarks>
        </member>
        <member name="P:Realms.Sync.RealmPermission.Permissions">
            <summary>
            Gets the permissions for the Realm.
            </summary>
        </member>
        <member name="M:Realms.Sync.RealmPermission.Get(Realms.Realm)">
            <summary>
            Retrieve the singleton object for the given Realm. This will return
            <c>null</c> for non-partial Realms.
            </summary>
            <param name="realm">The Realm instance.</param>
            <returns>
            A <c>RealmPermission</c> instance that allows you to manipulate the permissions
            for this Realm.
            </returns>
        </member>
        <member name="T:Realms.Sync.RealmPrivileges">
            <summary>
            A description of the actual privileges which apply to a Realm.
            </summary>
            <remarks>
            This is a combination of all of the privileges granted to all of the Roles which the
            current User is a member of, obtained by calling <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm)"/> on
            the Realm.
            </remarks>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.Read">
            <summary>
            If this flag is not present, the current User is not permitted to see the Realm at all. This can
            happen only if the Realm was created locally and has not yet been synchronized.
            </summary>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.Update">
            <summary>
            If this flag is not present, no modifications to the Realm are permitted. Write transactions can
            be performed locally, but any changes made will be reverted by the server. <see cref="F:Realms.Sync.RealmPrivileges.SetPermissions"/>
            and <see cref="F:Realms.Sync.RealmPrivileges.ModifySchema"/> will always be denied when this is denied.
            </summary>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.SetPermissions">
            <summary>
            If this flag is not present, no modifications to the permissions property of the <see cref="T:Realms.Sync.RealmPermission"/>
            object for are permitted. Write transactions can be performed locally, but any
            changes made will be reverted by the server.
            </summary>
            <remarks>
            Note that if invalid privilege changes are made, <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm)"/>
            will return results reflecting those invalid changes until synchronization occurs.
            <para/>
            Even if this flag is present, note that the user will be unable to grant more
            privileges to a Role than what they have themselves, e.g. they won't be able to grant
            <see cref="F:Realms.Sync.RealmPrivileges.Update"/> if they haven't been granted <see cref="F:Realms.Sync.RealmPrivileges.Update"/> first.
            <para/>
            Adding or removing Users from a Role is controlled by <see cref="F:Realms.Sync.RealmPrivileges.Update"/> privileges on that
            Role, and not by this value.
            </remarks>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.ModifySchema">
            <summary>
            If this flag is not present, the user is not permitted to add new object types to the Realm or add
            new properties to existing object types.
            </summary>
            <remarks>
            Defining new <see cref="T:Realms.RealmObject"/> subclasses (and not
            excluding them from the schema with <see cref="P:Realms.RealmConfigurationBase.ObjectClasses"/> will result
            in the application crashing if the object types are not first added on the server by a more privileged
            user.
            </remarks>
        </member>
        <member name="T:Realms.Sync.SubscriptionState">
            <summary>
            An enumeration, representing the possible state of a sync subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Error">
            <summary>
            An error occurred while creating the subscription or while the server was processing it.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Pending">
            <summary>
            The subscription has been created, and is waiting to be processed by the server.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Complete">
            <summary>
            The subscription has been processed by the server, and objects matching the subscription
            are now being synchronized to this client.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Creating">
            <summary>
            The subscription is being created, but has not yet been written to the synced Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Invalidated">
            <summary>
            This subscription has been removed.
            </summary>
        </member>
        <member name="T:Realms.Sync.PermissionExtensions">
            <summary>
            A set of extension methods that simplify working with object level permissions.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm)">
            <summary>
            Returns the computed privileges which the current user has for this Realm.
            <para/>
            This combines all privileges granted on the Realm by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale.It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            </summary>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <returns>The privileges which the current user has for the current Realm.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges``1(Realms.Realm)">
            <summary>
            Returns the computed privileges which the current user has for the given class.
            <para/>
            This combines all privileges granted on the class by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale. It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            </summary>
            <typeparam name="T">The <see cref="T:Realms.RealmObject"/> inheritor to get the privileges for.</typeparam>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <returns>The privileges which the current user has for the given class.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,System.String)">
            <summary>
            Returns the computed privileges which the current user has for the given class.
            <para/>
            This combines all privileges granted on the class by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale. It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            </summary>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <param name="className">The name of a <see cref="T:Realms.RealmObject"/> inheritor to get the privileges for.</param>
            <returns>The privileges which the current user has for the given class.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,Realms.RealmObject)">
            <summary>
            Returns the computed privileges which the current user has for the given object.
            </summary>
            <remarks>
            This combines all privileges granted on the object by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale. It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            <para/>
            The object must be a valid object managed by this Realm. Passing in an
            invalidated object, an unmanaged object, or an object managed by a
            different Realm will throw an exception.
            </remarks>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <param name="obj">A managed object to get the privileges for.</param>
            <returns>The privileges which the current user has for the given object.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.Add(System.Collections.Generic.IList{Realms.Sync.PermissionUser},Realms.Sync.User)">
            <summary>
            A convenience method that converts a <see cref="T:Realms.Sync.User"/> to
            <see cref="T:Realms.Sync.PermissionUser"/> and adds it to the list of users
            if necessary. If a <see cref="T:Realms.Sync.PermissionUser"/> with that identity
            already belongs to the collection, this method will be a no-op.
            </summary>
            <param name="users">
            The collection of users to which <c>user</c> will be added.
            </param>
            <param name="user">The user to add.</param>
        </member>
        <member name="T:Realms.Sync.Credentials">
            <summary>
            A class, representing the credentials used for authenticating a <see cref="T:Realms.Sync.User"/>.
            </summary>
        </member>
        <member name="T:Realms.Sync.Credentials.Provider">
            <summary>
            A class, containing the names for the built in providers.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.Provider.Facebook">
            <summary>
            The Facebook provider, associated with <see cref="M:Realms.Sync.Credentials.Facebook(System.String)"/>.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.Provider.Google">
            <summary>
            The Google provider, associated with <see cref="M:Realms.Sync.Credentials.Google(System.String)"/>.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.Provider.UsernamePassword">
            <summary>
            The Username/Password provider, associated with <see cref="M:Realms.Sync.Credentials.UsernamePassword(System.String,System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.Provider.AzureAD">
            <summary>
            The Azure Active Directory provider, associated with <see cref="M:Realms.Sync.Credentials.AzureAD(System.String)"/>.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.Provider.JWT">
            <summary>
            The Json Web Token provider, associated with <see cref="M:Realms.Sync.Credentials.JWT(System.String)"/>.
            </summary>
        </member>
        <member name="M:Realms.Sync.Credentials.Custom(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an instance of <see cref="T:Realms.Sync.Credentials"/> with a custom provider and user identifier.
            </summary>
            <param name="identityProvider">Provider used to verify the credentials.</param>
            <param name="userIdentifier">String identifying the user. Usually a username of id.</param>
            <param name="userInfo">Data describing the user further or null if the user does not have any extra data. The data will be serialized to JSON, so all values must be mappable to a valid JSON data type.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Debug">
            <summary>
            Creates an instance of <see cref="T:Realms.Sync.Credentials"/> to be used during development. Not enabled for Realm Object Server configured for production.
            </summary>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Facebook(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a Facebook login.
            </summary>
            <param name="facebookToken">A Facebook authentication token, obtained by logging into Facebook.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Google(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a Google login.
            </summary>
            <param name="googleToken">A Google authentication token, obtained by logging into Google.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.UsernamePassword(System.String,System.String,System.Boolean)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a login with a username and a password.
            </summary>
            <param name="username">The username of the user.</param>
            <param name="password">The user's password.</param>
            <param name="createUser"><c>true</c> if the user should be created, <c>false</c> otherwise. It is not possible to create a user twice when logging in, so this flag should only be set to true the first time a user logs in.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Anonymous">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> for an anonymous user. These can only be used once - using them a second
            time will result in a different user being logged in. If you need to get a user that has already logged
            in with the Anonymous credentials, use <see cref="P:Realms.Sync.User.Current"/> or <see cref="P:Realms.Sync.User.AllLoggedIn"/>.
            </summary>
            <returns>
            An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/>
            </returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Nickname(System.String,System.Boolean)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a login with a nickname. If multiple users try to login
            with the same nickname, they'll get the same underlying sync user.
            </summary>
            <param name="value">The nickname of the user.</param>
            <param name="isAdmin">An optional parameter controlling whether the user is admin.</param>
            <returns>
            An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/>
            </returns>
        </member>
        <member name="M:Realms.Sync.Credentials.AzureAD(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on an Active Directory login.
            </summary>
            <param name="adToken">An access token, obtained by logging into Azure Active Directory.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.JWT(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a Facebook login.
            </summary>
            <param name="token">A Json Web Token, obtained by logging into Facebook.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="P:Realms.Sync.Credentials.IdentityProvider">
            <summary>
            Gets the identity provider for the credentials.
            </summary>
            <value>The identity provider, such as Google, Facebook, etc.</value>
        </member>
        <member name="P:Realms.Sync.Credentials.Token">
            <summary>
            Gets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:Realms.Sync.Credentials.UserInfo">
            <summary>
            Gets additional user information associated with the credentials.
            </summary>
            <value>A dictionary, containing the additional information.</value>
        </member>
        <member name="T:Realms.Sync.Session">
            <summary>
            An object encapsulating a Realm Object Server session. Sessions represent the communication between the client
            (and a local Realm file on disk), and the server (and a remote Realm at a given URL stored on a Realm Object Server).
            Sessions are always created by the SDK and vended out through various APIs. The lifespans of sessions associated
            with Realms are managed automatically.
            </summary>
        </member>
        <member name="E:Realms.Sync.Session.Error">
            <summary>
            Triggered when an error occurs on a session. The <c>sender</c> argument will be the session which has errored.
            </summary>
        </member>
        <member name="P:Realms.Sync.Session.ServerUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> describing the remote Realm which this session connects to and synchronizes changes with.
            </summary>
            <value>The <see cref="T:System.Uri"/> where the Realm Object Server resides.</value>
        </member>
        <member name="P:Realms.Sync.Session.State">
            <summary>
            Gets the session’s current state.
            </summary>
            <value>An enum value indicating the state of the session.</value>
        </member>
        <member name="P:Realms.Sync.Session.User">
            <summary>
            Gets the <see cref="P:Realms.Sync.Session.User"/> defined by the <see cref="T:Realms.Sync.SyncConfiguration"/> that is used to connect to the Realm Object Server.
            </summary>
            <value>The <see cref="P:Realms.Sync.Session.User"/> that was used to create the <see cref="T:Realms.Realm"/>'s <see cref="T:Realms.Sync.SyncConfiguration"/>.</value>
        </member>
        <member name="M:Realms.Sync.Session.Reconnect">
            <summary>
            Attempts to reconnect all sessions.
            </summary>
            <remarks>
            By default, the sync engine will attempt to reconnect sessions at incrementing intervals. This method is
            useful when you are monitoring connectivity yourself, using e.g.
            <see href="https://github.com/jamesmontemagno/ConnectivityPlugin">Connectivity Plugin</see> or through the
            native connectivity API and you wish to cancel that delay and try to reconnect immediately.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Session.GetProgressObservable(Realms.Sync.ProgressDirection,Realms.Sync.ProgressMode)">
             <summary>
             Gets an <see cref="T:System.IObservable`1"/> that can be used to track upload or download progress.
             </summary>
             <remarks>
             To start receiving notifications, you should call <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/> on the returned object.
             The token returned from <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/> should be retained as long as progress
             notifications are desired. To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose"/>
             on the token.
             You don't need to keep a reference to the observable itself.
             The progress callback will always be called once immediately upon subscribing in order to provide
             the latest available status information.
             </remarks>
             <returns>An observable that you can subscribe to and receive progress updates.</returns>
             <param name="direction">The transfer direction (upload or download) to track in the subscription callback.</param>
             <param name="mode">The desired behavior of this progress notification block.</param>
             <example>
             <code>
             class ProgressNotifyingViewModel
             {
                 private IDisposable notificationToken;
            
                 public void ShowProgress()
                 {
                     var observable = session.GetProgressObservable(ProgressDirection.Upload, ProgressMode.ReportIndefinitely);
                     notificationToken = observable.Subscribe(progress =>
                     {
                         // Update relevant properties by accessing
                         // progress.TransferredBytes and progress.TransferableBytes
                     });
                 }
            
                 public void HideProgress()
                 {
                     notificationToken?.Dispose();
                     notificationToken = null;
                 }
             }
             </code>
             In this example we're using <see href="https://msdn.microsoft.com/en-us/library/ff402849(v=vs.103).aspx">ObservableExtensions.Subscribe</see>
             found in the <see href="https://github.com/Reactive-Extensions/Rx.NET">Reactive Extensions</see> class library.
             If you prefer not to take a dependency on it, you can create a class that implements <see cref="T:System.IObserver`1"/>
             and use it to subscribe instead.
             </example>
        </member>
        <member name="M:Realms.Sync.Session.WaitForUploadAsync">
            <summary>
            Waits for the <see cref="T:Realms.Sync.Session"/> to finish all pending uploads.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when all pending uploads for this <see cref="T:Realms.Sync.Session"/> are completed.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a faulted session is waited on.</exception>
        </member>
        <member name="M:Realms.Sync.Session.WaitForDownloadAsync">
            <summary>
            Waits for the <see cref="T:Realms.Sync.Session"/> to finish all pending downloads.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when all pending downloads for this <see cref="T:Realms.Sync.Session"/> are completed.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a faulted session is waited on.</exception>
        </member>
        <member name="T:Realms.Sync.Subscription">
            <summary>
            A set of helper methods exposing partial-sync related functionality over collections.
            </summary>
        </member>
        <member name="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            For partially synchronized Realms, fetches and synchronizes the objects that match the query. 
            </summary>
            <typeparam name="T">The type of the objects making up the query.</typeparam>
            <param name="query">
            A query, obtained by calling <see cref="M:Realms.Realm.All``1"/> with or without additional filtering applied.
            </param>
            <param name="name">The name of this query that can be used to unsubscribe from.</param>
            <returns>
            A <see cref="T:Realms.Sync.Subscription`1"/> instance that contains information and methods for monitoring
            the state of the subscription.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>query</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <c>query</c> was not obtained from a partially synchronized Realm.</exception>
        </member>
        <member name="M:Realms.Sync.Subscription.UnsubscribeAsync(Realms.Realm,System.String)">
            <summary>
            Cancel a named subscription that was created by calling <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)"/>.
            <para />
            Removing a subscription will delete all objects from the local Realm that were matched
            only by that subscription and not any remaining subscriptions. The deletion is performed
            by the server, and so has no immediate impact on the contents of the local Realm. If the
            device is currently offline, the removal will not be processed until the device returns online.
            </summary>
            <param name="realm">The Realm where this subscription was added.</param>
            <param name="subscriptionName">The name of the subscription to remove.</param>
            <returns>An awaitable task, that indicates that the subscription has been removed locally.</returns>
        </member>
        <member name="M:Realms.Sync.Subscription.UnsubscribeAsync``1(Realms.Sync.Subscription{``0})">
            <summary>
            Cancel a subscription that was created by calling <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)"/>.
            <para />
            Removing a subscription will delete all objects from the local Realm that were matched
            only by that subscription and not any remaining subscriptions. The deletion is performed
            by the server, and so has no immediate impact on the contents of the local Realm. If the
            device is currently offline, the removal will not be processed until the device returns online.
            </summary>
            <typeparam name="T">The type of the objects that make up the subscription query.</typeparam>
            <param name="subscription">The subscription to cancel.</param>
            <returns>An awaitable task, that indicates that the subscription has been removed locally.</returns>
        </member>
        <member name="T:Realms.Sync.Subscription`1">
            <summary>
            A class that represents a subscription to a set of objects in a synced Realm.
            <para/>
            When partial sync is enabled for a synced Realm, the only objects that the server synchronizes to the
            client are those that match a sync subscription registered by that client. A subscription consists of
            of a query (represented by an <c>IQueryable{T}</c>) and an optional name.
            <para/>
            The state of the subscription can be observed by subscribing to the <see cref="E:Realms.Sync.Subscription`1.PropertyChanged"/> event handler.
            <para/>
            Subscriptions are created by calling <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)"/>.
            </summary>
            <typeparam name="T">The type of the objects that make up the subscription query.</typeparam>
        </member>
        <member name="E:Realms.Sync.Subscription`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.Subscription`1.State">
            <summary>
            Gets a value indicating the state of this subscription.
            </summary>
            <value>The state of the subscription.</value>
        </member>
        <member name="P:Realms.Sync.Subscription`1.Error">
            <summary>
            Gets a value indicating what error (if any) has occurred while processing the subscription.
            If the <see cref="P:Realms.Sync.Subscription`1.State"/> is not <see cref="F:Realms.Sync.SubscriptionState.Error"/>, this will be <c>null</c>.
            </summary>
            <value>An instance of <see cref="T:System.Exception"/> if an error has occurred; <c>null</c> otherwise.</value>
        </member>
        <member name="P:Realms.Sync.Subscription`1.Results">
            <summary>
            Gets the query that this subscription is associated with. Regardless of the state of the subscription,
            this value will reflect the results in the local Realm. This allows you to data-bind to this property
            immediately and show the last synchronized data. If the <see cref="P:Realms.Sync.Subscription`1.State"/> is <see cref="F:Realms.Sync.SubscriptionState.Invalidated"/>,
            the values returned will not be an adequate representation of the state of the remote Realm.
            </summary>
            <value>
            A queryable collection that can be further filtered, ordered, or observed for changes.
            </value>
        </member>
        <member name="M:Realms.Sync.Subscription`1.WaitForSynchronizationAsync">
            <summary>
            Waits for the subscription to complete synchronizing (equivalent to transitioning to the
            <see cref="F:Realms.Sync.SubscriptionState.Complete"/> state.
            </summary>
            <returns>
            An awaitable task, that, upon completion, indicates that the objects matching the specified query
            have been synchronized to the local Realm.
            </returns>
        </member>
        <member name="T:Realms.Sync.SyncConfiguration">
            <summary>
            A <see cref="T:Realms.Sync.SyncConfiguration"/> is used to setup a <see cref="T:Realms.Realm"/> that can be synchronized between devices using the
            Realm Object Server. A valid <see cref="P:Realms.Sync.SyncConfiguration.User"/> is required to create a <see cref="T:Realms.Sync.SyncConfiguration"/>.
            </summary>
            <seealso cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/>
            <seealso cref="T:Realms.Sync.Credentials"/>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.LogLevel">
            <summary>
            Gets or sets a value indicating how detailed the sync client's logs will be.
            </summary>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.ServerUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> used to create this <see cref="T:Realms.Sync.SyncConfiguration"/>.
            </summary>
            <value>The <see cref="T:System.Uri"/> where the Realm Object Server is hosted.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.User">
            <summary>
            Gets the <see cref="P:Realms.Sync.SyncConfiguration.User"/> used to create this <see cref="T:Realms.Sync.SyncConfiguration"/>.
            </summary>
            <value>The <see cref="P:Realms.Sync.SyncConfiguration.User"/> whose <see cref="T:Realms.Realm"/>s will be synced.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.EnableSSLValidation">
            <summary>
            Gets or sets a value indicating whether SSL certificate validation is enabled for the connection associated
            with this configuration value.
            </summary>
            <value><c>true</c> if SSL validation is enabled; otherwise, <c>false</c>. Default value is <c>true</c>.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.TrustedCAPath">
            <summary>
            Gets or sets the path to the trusted root certificate(s) authority (CA) in PEM format, that should
            be used to validate the TLS connections to the Realm Object Server.
            </summary>
            <value>The path to the certificate.</value>
            <remarks>
            The file will be copied at runtime into the internal storage.
            <br/>
            It is recommended to include only the root CA you trust, and not the entire list of root CA as this file
            will be loaded at runtime. It is your responsibility to download and verify the correct PEM for the root CA
            you trust.
            <br/>
            This property is ignored on Apple platforms - you should use the KeyChain API to install your certificate
            instead.
            </remarks>
            <seealso href="https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_load_verify_locations.html">
            OpenSSL documentation for SSL_CTX_load_verify_locations.
            </seealso>
            <seealso href="https://ccadb-public.secure.force.com/mozilla/IncludedCACertificateReport">
            Mozilla Included CA Certificate List
            </seealso>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.IsPartial">
            <summary>
            Gets or sets a value indicating whether this Realm should be opened in 'partial synchronization' mode.
            Partial synchronization mode means that no objects are synchronized from the remote Realm
            except those matching queries that the user explicitly specifies.
            </summary>
        </member>
        <member name="M:Realms.Sync.SyncConfiguration.#ctor(Realms.Sync.User,System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.SyncConfiguration"/> class.
            </summary>
            <param name="user">
            A valid <see cref="P:Realms.Sync.SyncConfiguration.User"/>. If not provided, the currently logged-in user will be used.
            </param>
            <param name="serverUri">
            A unique <see cref="T:System.Uri"/> that identifies the Realm. In URIs, <c>~</c> can be used as a placeholder for a user Id.
            If not provided, a Uri will be constructed from the user's <see cref="P:Realms.Sync.SyncConfiguration.ServerUri"/>, combined with <c>/default</c>.
            If the default Uri is used, the configuration's <see cref="P:Realms.Sync.SyncConfiguration.IsPartial"/> will be set to <c>true</c>.
            </param>
            <param name="optionalPath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
        </member>
        <member name="M:Realms.Sync.SyncConfiguration.SetFeatureToken(System.String)">
            <summary>
            Sets the feature token, associated with your edition. You only need to call it if you're using a professional
            or higher edition and only on platforms where features are disabled for lower editions.
            </summary>
            <param name="token">The feature token provided to you by the Realm team.</param>
            <seealso href="https://realm.io/docs/realm-object-server/pe-ee/#enabling-professional-and-enterprise-apis">
            See more details on Enabling Professional and Enterprise APIs in the documentation.
            </seealso>
        </member>
        <member name="T:Realms.Sync.User">
            <summary>
            This class represents a user on the Realm Object Server. The credentials are provided by various 3rd party providers (Facebook, Google, etc.).
            A user can log in to the Realm Object Server, and if access is granted, it is possible to synchronize the local and the remote Realm. Moreover, synchronization is halted when the user is logged out.
            It is possible to persist a user. By retrieving a user, there is no need to log in to the 3rd party provider again. Persisting a user between sessions, the user's credentials are stored locally on the device, and should be treated as sensitive data.
            </summary>
        </member>
        <member name="P:Realms.Sync.User.Current">
            <summary>
            Gets the currently logged-in user. If none exists, null is returned.
            If more than one user is currently logged in, an exception is thrown.
            </summary>
            <value>Valid user or <c>null</c> to indicate nobody logged in.</value>
            <exception cref="T:Realms.Exceptions.RealmException">Thrown if there are more than one users logged in.</exception>
        </member>
        <member name="P:Realms.Sync.User.AllLoggedIn">
            <summary>
            Gets all currently logged in users.
            </summary>
            <value>An array of valid logged in users.</value>
        </member>
        <member name="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)">
            <summary>
            Logs the user in to the Realm Object Server.
            </summary>
            <param name="credentials">The credentials to use for authentication.</param>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <returns>An awaitable Task, that, upon completion, contains the logged in user.</returns>
        </member>
        <member name="M:Realms.Sync.User.ConfigurePersistence(Realms.Sync.UserPersistenceMode,System.Byte[],System.Boolean)">
            <summary>
            Configures user persistence. If you need to call this, be sure to do so before accessing any other Realm API.
            </summary>
            <param name="mode">The persistence mode.</param>
            <param name="encryptionKey">The key to encrypt the persistent user store with.</param>
            <param name="resetOnError">If set to <c>true</c> reset the persistent user store on error.</param>
            <remarks>
            Users are persisted in a realm file within the application's sandbox.
            <para>
            By default <see cref="T:Realms.Sync.User"/> objects are persisted and are additionally protected with an encryption key stored
            in the iOS Keychain when running on an iOS device (but not on a Simulator).
            On Android users are persisted in plaintext, because the AndroidKeyStore API is only supported on API level 18 and up.
            You might want to provide your own encryption key on Android or disable persistence for security reasons.
            </para>
            </remarks>
        </member>
        <member name="M:Realms.Sync.User.GetLoggedInUser(System.String,System.Uri)">
            <summary>
            Gets a logged in user with a specified identity.
            </summary>
            <returns>A user instance if a logged in user with that id exists, <c>null</c> otherwise.</returns>
            <param name="identity">The identity of the user.</param>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
        </member>
        <member name="P:Realms.Sync.User.RefreshToken">
            <summary>
            Gets this user's refresh token. This is the user's credential for accessing the Realm Object Server and
            should be treated as sensitive data.
            </summary>
            <value>A unique string that can be used for refreshing the user's credentials.</value>
        </member>
        <member name="P:Realms.Sync.User.Identity">
            <summary>
            Gets the identity of this user on the Realm Object Server. The identity is a guaranteed to be unique
            among all users on the Realm Object Server.
            </summary>
            <value>A string that uniquely identifies that user in Realm Object Server.</value>
        </member>
        <member name="P:Realms.Sync.User.ServerUri">
            <summary>
            Gets the server <see cref="T:System.Uri"/> that was used for authentication.
            </summary>
            <value>The <see cref="T:System.Uri"/> used to connect to the authentication service.</value>
        </member>
        <member name="P:Realms.Sync.User.State">
            <summary>
            Gets the current state of the user.
            </summary>
            <value>A value indicating whether the user is active, logged out, or an error has occurred.</value>
        </member>
        <member name="P:Realms.Sync.User.IsAdmin">
            <summary>
            Gets a value indicating whether this <see cref="T:Realms.Sync.User"/> is a Realm Object Server administrator user.
            </summary>
            <value><c>true</c> if the user is admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Realms.Sync.User.LogOut">
            <summary>
            Logs out the user from the Realm Object Server. Once the Object Server has confirmed the logout the user credentials will be deleted from this device.
            </summary>
        </member>
        <member name="M:Realms.Sync.User.LogOutAsync">
            <summary>
            Logs out the user from the Realm Object Server. Once the Object Server has confirmed the logout the user credentials will be deleted from this device.
            </summary>
            <returns>An awaitable Task, that, upon completion indicates that the user has been logged out both locally and on the server.</returns>
        </member>
        <member name="M:Realms.Sync.User.ChangePasswordAsync(System.String)">
            <summary>
            Changes the user's password.
            </summary>
            <param name="newPassword">The user's new password.</param>
            <remarks>
            Changing a user's password using an authentication server that doesn't
            use HTTPS is a major security flaw, and should only be done while testing.
            </remarks>
            <returns>An awaitable task that, when successful, indicates that the password has changed.</returns>
        </member>
        <member name="M:Realms.Sync.User.ChangePasswordAsync(System.String,System.String)">
            <summary>
            Changes another user's password.
            </summary>
            <param name="userId">The <see cref="P:Realms.Sync.User.Identity"/> of the user we want to change the password for.</param>
            <param name="newPassword">The user's new password.</param>
            <remarks>
            This user needs admin privilege in order to change someone else's password.
            <br/>
            Changing a user's password using an authentication server that doesn't
            use HTTPS is a major security flaw, and should only be done while testing.
            </remarks>
            <returns>An awaitable task that, when successful, indicates that the password has changed.</returns>
        </member>
        <member name="M:Realms.Sync.User.RetrieveInfoForUserAsync(System.String,System.String)">
            <summary>
            Looks up user's information by provider id. This is useful when you know the id of a user in a provider's system,
            e.g. on Facebook and want to find the associated Realm user's Id.
            </summary>
            <param name="provider">The provider that the user has signed up with.</param>
            <param name="providerUserIdentity">The id of the user in the provider's system.</param>
            <remarks>
            This user needs admin privilege in order to look up other users by provider id.
            <br/>
            The exact names of built-in providers can be found in <see cref="T:Realms.Sync.Credentials.Provider"/>.
            </remarks>
            <returns>
            A <see cref="T:Realms.Sync.UserInfo"/>, containing information about the User's Identity in Realm's authentication system,
            or <c>null</c> if a user has not been found.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.RequestPasswordResetAsync(System.Uri,System.String)">
            <summary>
            Request a password reset email to be sent to a user's email. This method requires internet connection
            and will not throw an exception, even if the email doesn't belong to a Realm Object Server user.
            </summary>
            <remarks>
            This can only be used for users who authenticated with <see cref="M:Realms.Sync.Credentials.UsernamePassword(System.String,System.String,System.Boolean)"/>
            and passed a valid email address as a username.
            </remarks>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="email">The email that corresponds to the user's username.</param>
            <returns>An awaitable task that, upon completion, indicates that the request has been sent.</returns>
        </member>
        <member name="M:Realms.Sync.User.CompletePasswordResetAsync(System.Uri,System.String,System.String)">
            <summary>
            Complete the password reset flow by using the reset token sent to the user's email as a one-time
            authorization token to change the password.
            </summary>
            <remarks>
            By default, the link that will be sent to the user's email will redirect to a webpage where
            they can enter their new password. If you wish to provide a native UX, you may wish to modify
            the url to use deep linking to open the app, extract the token, and navigate to a view that
            allows them to change their password within the app.
            </remarks>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="token">The token that was sent to the user's email address.</param>
            <param name="newPassword">The user's new password.</param>
            <returns>An awaitable task that, when successful, indicates that the password has changed.</returns>
        </member>
        <member name="M:Realms.Sync.User.RequestEmailConfirmationAsync(System.Uri,System.String)">
            <summary>
            Request an email confirmation email to be sent to a user's email. This method requires internet connection
            and will not throw an exception, even if the email doesn't belong to a Realm Object Server user.
            </summary>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="email">The email that corresponds to the user's username.</param>
            <returns>An awaitable task that, upon completion, indicates that the request has been sent.</returns>
        </member>
        <member name="M:Realms.Sync.User.ConfirmEmailAsync(System.Uri,System.String)">
            <summary>
            Complete the password reset flow by using the confirmation token sent to the user's email as a one-time
            authorization token to confirm their email.
            </summary>
            <remarks>
            By default, the link that will be sent to the user's email will redirect to a webpage where
            they'll see a generic "Thank you for confirming" text. If you wish to provide a native UX, you
            may wish to modify the url to use deep linking to open the app, extract the token, and inform them
            that their email has been confirmed.
            </remarks>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="token">The token that was sent to the user's email address.</param>
            <returns>An awaitable task that, when successful, indicates that the email has been confirmed.</returns>
        </member>
        <member name="M:Realms.Sync.User.Equals(Realms.Sync.User)">
            <inheritdoc />
        </member>
        <member name="M:Realms.Sync.User.GetGrantedPermissionsAsync(Realms.Sync.Recipient,System.Int32)">
            <summary>
            Asynchronously retrieve all permissions associated with the user calling this method.
            </summary>
            <returns>
            A queryable collection of <see cref="T:Realms.Sync.PathPermission"/> objects that provide detailed information
            regarding the granted access.
            </returns>
            <param name="recipient">The optional recipient of the permission.</param>
            <param name="millisecondTimeout">
            The timeout in milliseconds for downloading server changes. If the download times out, no error will be thrown
            and instead the latest local state will be returned. If set to 0, the latest state will be returned immediately.
            </param>
            <remarks>
            The collection is a live query, similar to what you would get by calling <see cref="M:Realms.Realm.All(System.String)"/>, so the same
            features and limitations apply - you can query and subscribe for notifications, but you cannot pass it between
            threads.
            </remarks>
        </member>
        <member name="M:Realms.Sync.User.ApplyPermissionsAsync(Realms.Sync.PermissionCondition,System.String,Realms.Sync.AccessLevel)">
            <summary>
            Changes the permissions of a Realm.
            </summary>
            <returns>
            An awaitable task, that, upon completion, indicates that the permissions have been successfully applied by the server.
            </returns>
            <param name="condition">A <see cref="T:Realms.Sync.PermissionCondition"/> that will be used to match existing users against.</param>
            <param name="realmUrl">The Realm URL whose permissions settings should be changed. Use <c>*</c> to change the permissions of all Realms managed by this <see cref="T:Realms.Sync.User"/>.</param>
            <param name="accessLevel">
            The access level to grant matching users. Note that the access level setting is absolute, i.e. it may revoke permissions for users that
            previously had a higher access level. To revoke all permissions, use <see cref="F:Realms.Sync.AccessLevel.None" />
            </param>
        </member>
        <member name="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})">
            <summary>
            Generates a token that can be used for sharing a Realm.
            </summary>
            <returns>
            A token that can be shared with another user, e.g. via email or message and then consumed by
            <see cref="M:Realms.Sync.User.AcceptPermissionOfferAsync(System.String)"/> to obtain permissions to a Realm.</returns>
            <param name="realmUrl">The Realm URL whose permissions settings should be changed. Use <c>*</c> to change the permissions of all Realms managed by this <see cref="T:Realms.Sync.User"/>.</param>
            <param name="accessLevel">
            The access level to grant matching users. Note that the access level setting is absolute, i.e. it may revoke permissions for users that
            previously had a higher access level. To revoke all permissions, use <see cref="F:Realms.Sync.AccessLevel.None" />
            </param>
            <param name="expiresAt">Optional expiration date of the offer. If set to <c>null</c>, the offer doesn't expire.</param>
        </member>
        <member name="M:Realms.Sync.User.AcceptPermissionOfferAsync(System.String)">
            <summary>
            Consumes a token generated by <see cref="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})"/> to obtain permissions to a shared Realm.
            </summary>
            <returns>The relative url of the Realm that the token has granted permissions to.</returns>
            <param name="offerToken">The token, generated by <see cref="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})"/>.</param>
        </member>
        <member name="M:Realms.Sync.User.InvalidateOfferAsync(Realms.Sync.PermissionOffer)">
            <summary>
            Invalidates a permission offer.
            </summary>
            <remarks>
            Invalidating an offer prevents new users from consuming its token. It doesn't revoke any permissions that have
            already been granted.
            </remarks>
            <returns>
            An awaitable task, that, upon completion, indicates that the offer has been successfully invalidated by the server.
            </returns>
            <param name="offer">The offer that should be invalidated.</param>
        </member>
        <member name="M:Realms.Sync.User.GetPermissionOffers(Realms.Sync.ManagementObjectStatus[])">
            <summary>
            Gets the permission offers that this user has created by invoking <see cref="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})"/>.
            </summary>
            <returns>A queryable collection of <see cref="T:Realms.Sync.PermissionOffer"/> objects.</returns>
            <param name="statuses">Optional statuses to filter by. If empty, will return objects with any status.</param>
        </member>
        <member name="M:Realms.Sync.User.GetPermissionOfferResponses(Realms.Sync.ManagementObjectStatus[])">
            <summary>
            Gets the permission offer responses that this user has created by invoking <see cref="M:Realms.Sync.User.AcceptPermissionOfferAsync(System.String)"/>.
            </summary>
            <returns>A queryable collection of <see cref="T:Realms.Sync.PermissionOfferResponse"/> objects.</returns>
            <param name="statuses">Optional statuses to filter by. If empty, will return objects with any status.</param>
        </member>
        <member name="M:Realms.Sync.User.GetPermissionChanges(Realms.Sync.ManagementObjectStatus[])">
            <summary>
            Gets the permission changes that this user has created by invoking <see cref="M:Realms.Sync.User.ApplyPermissionsAsync(Realms.Sync.PermissionCondition,System.String,Realms.Sync.AccessLevel)"/>.
            </summary>
            <returns>A queryable collection of <see cref="T:Realms.Sync.PermissionChange"/> objects.</returns>
            <param name="statuses">Optional statuses to filter by. If empty, will return objects with any status.</param>
        </member>
        <member name="T:Realms.Sync.PermissionChange">
            <summary>
            Objects of this class allow to change permissions of owned Realms.
            They are created exclusively by the client and are processed by the server
            as indicated by the status fields.
            </summary>
            <remarks>
            <see cref="T:Realms.Sync.PermissionChange"/> objects allow to grant and revoke permissions by setting
            <see cref="P:Realms.Sync.PermissionChange.MayRead" />, <see cref="P:Realms.Sync.PermissionChange.MayWrite" /> and <see cref="P:Realms.Sync.PermissionChange.MayManage" /> accordingly.
            If any of these flags are not set, these are merged
            with either the existing or default permissions as applicable. As a
            side-effect this causes that the default permissions are permanently
            materialized for the affected Realm files and the affected user.
            Once the request has been processed, the <see cref="P:Realms.Sync.PermissionChange.Status"/>, <see cref="P:Realms.Sync.PermissionChange.StatusMessage"/>, and
            <see cref="P:Realms.Sync.PermissionChange.ErrorCode"/> will be updated accordingly.
            </remarks>
        </member>
        <member name="P:Realms.Sync.PermissionChange.Id">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionChange.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionChange.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionChange.StatusMessage">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionChange.Status">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionChange.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionChange.UserId">
            <summary>
            Gets the user or users to effect.
            </summary>
            <value><c>*</c> to change the permissions for all users.</value>
        </member>
        <member name="P:Realms.Sync.PermissionChange.RealmUrl">
            <summary>
            Gets the Realm to change permissions for.
            </summary>
            <value><c>*</c> to change the permissions of all Realms.</value>
        </member>
        <member name="P:Realms.Sync.PermissionChange.MayRead">
            <summary>
            Gets a value indicating whether the user(s) have read access to the specified Realm(s).
            </summary>
            <value><c>true</c> or <c>false</c> to request this new value. <c>null</c> to keep current value.</value>
        </member>
        <member name="P:Realms.Sync.PermissionChange.MayWrite">
            <summary>
            Gets a value indicating whether the user(s) have write access to the specified Realm(s).
            </summary>
            <value><c>true</c> or <c>false</c> to request this new value. <c>null</c> to keep current value.</value>
        </member>
        <member name="P:Realms.Sync.PermissionChange.MayManage">
            <summary>
            Gets a value indicating whether the user(s) have manage access to the specified Realm(s).
            </summary>
            <value><c>true</c> or <c>false</c> to request this new value. <c>null</c> to keep current value.</value>
        </member>
        <member name="M:Realms.Sync.PermissionChange.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.PermissionChange"/> class.
            </summary>
            <param name="userId">The user or users who should be granted these permission changes. Use * to change permissions for all users.</param>
            <param name="realmUrl">The Realm URL whose permissions settings should be changed. Use `*` to change the permissions of all Realms managed by the management Realm's <see cref="T:Realms.Sync.User"/>.</param>
            <param name="mayRead">Define read access. <c>true</c> or <c>false</c> to request this new value. <c>null</c> to keep current value.</param>
            <param name="mayWrite">Define write access. <c>true</c> or <c>false</c> to request this new value. <c>null</c> to keep current value.</param>
            <param name="mayManage">Define manage access. <c>true</c> or <c>false</c> to request this new value. <c>null</c> to keep current value.</param>
        </member>
        <member name="T:Realms.Sync.UserPermissionsExtensions">
            <summary>
            A set of extensions methods over the <see cref="T:Realms.Sync.User"/> class that expose functionality for managing synchronized Realm permissions.
            </summary>
        </member>
        <member name="M:Realms.Sync.UserPermissionsExtensions.GetManagementRealm(Realms.Sync.User)">
            <summary>
            Returns an instance of the Management Realm owned by the user.
            </summary>
            <remarks>
            This Realm can be used to control access and permissions for Realms owned by the user. This includes
            giving other users access to Realms.
            </remarks>
            <seealso href="https://realm.io/docs/realm-object-server/#modifying-permissions">How to control permissions</seealso>
            <param name="user">The user whose Management Realm to get.</param>
            <returns>A Realm that can be used to control access and permissions for Realms owned by the user.</returns>
        </member>
        <member name="M:Realms.Sync.UserPermissionsExtensions.GetPermissionRealm(Realms.Sync.User)">
            <summary>
            Returns an instance of the Permission Realm owned by the user.
            </summary>
            <remarks>
            This Realm can be used to review access permissions for Realms managed by the user
            and to Realms which the user was granted access to by other users.
            </remarks>
            <param name="user">The user whose Permission Realm to get.</param>
            <returns>A Realm that can be used to inspect access to other Realms.</returns>
        </member>
        <member name="T:Realms.Sync.PermissionOffer">
            <summary>
            Objects of this class are used to offer permissions to owned Realms.
            They are created exclusively by the client and are processed by the server
            as indicated by the status fields.
            </summary>
            <remarks>
            When offering permissions, you should create the offer and add it to the <see cref="T:Realms.Sync.User"/>'s Management Realm.
            Then you should subscribe to <see cref="E:Realms.RealmObject.PropertyChanged"/> to be notified when the server has
            processed the request.
            Once the request has been processed, the <see cref="P:Realms.Sync.PermissionOffer.Status"/>, <see cref="P:Realms.Sync.PermissionOffer.StatusMessage"/>, and
            <see cref="P:Realms.Sync.PermissionOffer.ErrorCode"/> will be updated accordingly.
            If the request has been processed successfully, the <see cref="P:Realms.Sync.PermissionOffer.Token"/> will be populated and you can share it
            with users you wish to grant permissions to.
            If the request has failed, the <see cref="P:Realms.Sync.PermissionOffer.StatusMessage"/> will be updated with relevant information about the
            failure and <see cref="P:Realms.Sync.PermissionOffer.ErrorCode"/> will be set to a non-null value.
            </remarks>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.Id">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOffer.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOffer.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOffer.StatusMessage">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOffer.Status">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOffer.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOffer.Token">
            <summary>
            Gets the token that can be used to offer the permissions defined in this object to another user.
            </summary>
            <value>A string, set by the server, that can be used to create a <see cref="T:Realms.Sync.PermissionOfferResponse"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.RealmUrl">
            <summary>
            Gets the url of the <see cref="T:Realms.Realm"/> to offer permissions to.
            </summary>
            <value>The url of Realm.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.MayRead">
            <summary>
            Gets a value indicating whether the receiver of this offer will be able to read from the <see cref="T:Realms.Realm"/>.
            </summary>
            <value><c>true</c> to allow the receiver to read data from the <see cref="T:Realms.Realm"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.MayWrite">
            <summary>
            Gets a value indicating whether the receiver of this offer will be able to write to the Realm.
            </summary>
            <value><c>true</c> to allow the receiver to write data to the <see cref="T:Realms.Realm"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.MayManage">
            <summary>
            Gets a value indicating whether the receiver of this offer will be able to manage access rights for others.
            </summary>
            <value><c>true</c> to allow the receiver to offer others access to the <see cref="T:Realms.Realm"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.ExpiresAt">
            <summary>
            Gets or sets the expiration date and time of the offer.
            </summary>
            <value>If <c>null</c>, the offer will never expire. Otherwise, the offer may not be consumed past the expiration date.</value>
        </member>
        <member name="M:Realms.Sync.PermissionOffer.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.PermissionOffer"/> class.
            </summary>
            <param name="realmUrl">The Realm URL to offer permissions to.</param>
            <param name="mayRead">If set to <c>true</c> grants read access.</param>
            <param name="mayWrite">If set to <c>true</c> grants write access.</param>
            <param name="mayManage">If set to <c>true</c> grants manage access.</param>
            <param name="expiresAt">Optional expiration date of the offer. If set to <c>null</c>, the offer doesn't expire.</param>
        </member>
        <member name="T:Realms.Sync.PermissionOfferResponse">
            <summary>
            Objects of this class are used to accept a <see cref="T:Realms.Sync.PermissionOffer"/> using a provided <see cref="P:Realms.Sync.PermissionOfferResponse.Token"/>.
            </summary>
            <remarks>
            Create an instance of <see cref="T:Realms.Sync.PermissionOfferResponse"/> using the provided <see cref="P:Realms.Sync.PermissionOffer.Token"/>
            and add it to the <see cref="T:Realms.Sync.User"/>'s ManagementRealm.
            After that, you should subscribe to <see cref="E:Realms.RealmObject.PropertyChanged"/> to be notified when the server
            processes the response.
            Once the request has been processed, the <see cref="P:Realms.Sync.PermissionOfferResponse.Status"/>, <see cref="P:Realms.Sync.PermissionOfferResponse.StatusMessage"/>, and
            <see cref="P:Realms.Sync.PermissionOfferResponse.ErrorCode"/> will be updated accordingly.
            If the request has been processed successfully, the <see cref="P:Realms.Sync.PermissionOfferResponse.RealmUrl"/> will be populated and you can use it
            to create a new <see cref="T:Realms.Sync.SyncConfiguration"/>.
            If the request has failed, the <see cref="P:Realms.Sync.PermissionOfferResponse.StatusMessage"/> will be updated with relevant information about the
            failure and <see cref="P:Realms.Sync.PermissionOfferResponse.ErrorCode"/> will be set to a non-null value.
            </remarks>
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.Id">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.StatusMessage">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.Status">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.Token">
            <summary>
            Gets the token that was provided by the offering user.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionOfferResponse.RealmUrl">
            <summary>
            Gets the url of the Realm that the token has granted permissions to.
            </summary>
            <remarks>
            Filled by the server after the <see cref="T:Realms.Sync.PermissionOfferResponse"/> was processed.
            </remarks>
        </member>
        <member name="M:Realms.Sync.PermissionOfferResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.PermissionOfferResponse"/> class.
            </summary>
            <param name="token">The token that was provided by the offering user.</param>
        </member>
        <member name="T:Realms.Sync.RealmSyncExtensions">
            <summary>
            A set of extension methods that provide Sync-related functionality on top of Realm classes.
            </summary>
        </member>
        <member name="M:Realms.Sync.RealmSyncExtensions.GetSession(Realms.Realm)">
            <summary>
            Gets the <see cref="T:Realms.Sync.Session"/> for the realm file behind this <see cref="T:Realms.Realm"/>.
            </summary>
            <returns>The <see cref="T:Realms.Sync.Session"/> that is responsible for synchronizing with a Realm Object Server instance.</returns>
            <param name="realm">An instance of the <see cref="T:Realms.Realm"/> class created with a <see cref="T:Realms.Sync.SyncConfiguration"/> object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>realm</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <c>realm</c> was not created with a <see cref="T:Realms.Sync.SyncConfiguration"/> object.</exception>
        </member>
        <member name="M:Realms.Sync.RealmSyncExtensions.SubscribeToObjectsAsync``1(Realms.Realm,System.String)">
            <summary>
            If the Realm is a partially synchronized Realm, fetch and synchronize the objects
            of a given object type that match the given query (in string format).
            </summary>
            <typeparam name="T">The type of the objects making up the query.</typeparam>
            <param name="realm">An instance of the <see cref="T:Realms.Realm"/> class created with a <see cref="T:Realms.Sync.SyncConfiguration"/> object.</param>
            <param name="query">A string-based query using the NSPredicate syntax to specify which objects should be returned.</param>
            <returns>An awaitable task that, upon completion, contains all objects matching the query.</returns>
            <remarks>Partial synchronization is in beta. Its APIs are subject to change.</remarks>
            <seealso href="https://academy.realm.io/posts/nspredicate-cheatsheet/">NSPredicate Cheatsheet</seealso>
        </member>
        <member name="T:Realms.Sync.Testing.TestingExtensions">
            <summary>
            A set of extension methods to be used in unit-testing scenarios. Should not be used in production.
            </summary>
        </member>
        <member name="M:Realms.Sync.Testing.TestingExtensions.SimulateError(Realms.Sync.Session,Realms.Sync.Exceptions.ErrorCode,System.String,System.Boolean)">
            <summary>
            Simulates a session error.
            </summary>
            <param name="session">The session where the simulated error will occur.</param>
            <param name="errorCode">Error code.</param>
            <param name="message">Error message.</param>
            <param name="isFatal">If set to <c>true</c> the error will be marked as fatal.</param>
            <remarks>
            Use this method to test your error handling code without connecting to a Realm Object Server.
            Some error codes, such as <see cref="F:Realms.Sync.Exceptions.ErrorCode.OtherSessionError"/> will be ignored and will not be reported
            to <see cref="E:Realms.Sync.Session.Error"/> subscribers.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Testing.TestingExtensions.SimulateProgress(Realms.Sync.Session,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Simulates a progress update.
            </summary>
            <param name="session">Session which will report progress.</param>
            <param name="downloadedBytes">Downloaded bytes.</param>
            <param name="downloadableBytes">Downloadable bytes.</param>
            <param name="uploadedBytes">Uploaded bytes.</param>
            <param name="uploadableBytes">Uploadable bytes.</param>
            <remarks>
            Use this method to test your progress handling code without connecting to a Realm Object Server.
            Some throttling may occur at a native level, so it is recommended to use <c>Task.Delay()</c> between invocations.
            </remarks>
        </member>
        <member name="T:Realms.Sync.SessionState">
            <summary>
            The current state of a sync session object.
            </summary>
        </member>
        <member name="F:Realms.Sync.SessionState.Active">
            <summary>
            The session is connected to the Realm Object Server and is actively transferring data.
            </summary>
        </member>
        <member name="F:Realms.Sync.SessionState.Inactive">
            <summary>
            The session is not currently communicating with the Realm Object Server.
            </summary>
        </member>
        <member name="T:Realms.Sync.UserPersistenceMode">
            <summary>
            Enumeration that specifies how and if logged-in <see cref="T:Realms.Sync.User"/> objects are persisted
            across application launches.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserPersistenceMode.NotEncrypted">
            <summary>
            Persist <see cref="T:Realms.Sync.User"/> objects, but do not encrypt them.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserPersistenceMode.Encrypted">
            <summary>
            Persist <see cref="T:Realms.Sync.User"/> objects in an encrypted store.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserPersistenceMode.Disabled">
            <summary>
            Do not persist <see cref="T:Realms.Sync.User"/> objects.
            </summary>
        </member>
        <member name="T:Realms.Sync.UserState">
            <summary>
            The state of the user object.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.LoggedOut">
            <summary>
            The user is logged out. Call <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/> with valid credentials to log the user back in.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.Active">
            <summary>
            The user is logged in, and any Realms associated with it are synchronizing with the Realm Object Server.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.Error">
            <summary>
            The user has encountered a fatal error state, and cannot be used.
            </summary>
        </member>
        <member name="T:Realms.Sync.IPermissionObject">
            <summary>
            Interface that describes the shared base model of all Permission classes.
            </summary>
        </member>
        <member name="P:Realms.Sync.IPermissionObject.Id">
            <summary>
            Gets the unique identifier of this object in the Management realm.
            </summary>
            <value>The unique id of the object.</value>
        </member>
        <member name="P:Realms.Sync.IPermissionObject.CreatedAt">
            <summary>
            Gets the creation time of this object.
            </summary>
            <value>A <see cref="T:System.DateTimeOffset"/> indicating the object's creation date and time.</value>
        </member>
        <member name="P:Realms.Sync.IPermissionObject.UpdatedAt">
            <summary>
            Gets when the object was updated the last time.
            </summary>
            <remarks>
            This will be updated by the server with the current object when the object is processed.
            </remarks>
            <value>A <see cref="T:System.DateTimeOffset"/> indicating the last time the object has been updated.</value>
        </member>
        <member name="P:Realms.Sync.IPermissionObject.ErrorCode">
            <summary>
            Gets the <see cref="P:Realms.Sync.IPermissionObject.ErrorCode"/> if any.
            </summary>
            <remarks>
            Filled by the server after an object was processed indicating the status of the operation.
            If <see cref="P:Realms.Sync.IPermissionObject.Status"/> returns <see cref="F:Realms.Sync.ManagementObjectStatus.Error"/>, the <see cref="P:Realms.Sync.IPermissionObject.ErrorCode"/>
            property can be used to get a strongly typed code for the error and handle expected error conditions, such as
            expired offer or attempting to share a realm without having manage access.
            </remarks>
            <value>
            An <see cref="P:Realms.Sync.IPermissionObject.ErrorCode"/> that indicates the reason for the error during processing.
            <c>null</c> if no error has occurred or the object hasn't been processed yet.
            </value>
        </member>
        <member name="P:Realms.Sync.IPermissionObject.StatusMessage">
            <summary>
            Gets the status message.
            </summary>
            <remarks>
            Filled by the server after an object was processed with additional info
            explaining the status if necessary.
            </remarks>
            <value>A detailed message describing the status (success, error) of the operation. <c>null</c> if the object
            has not been processed yet.</value>
        </member>
        <member name="P:Realms.Sync.IPermissionObject.Status">
            <summary>
            Gets the <see cref="T:Realms.Sync.ManagementObjectStatus"/> as set by the server.
            </summary>
            <value>An enum indicating whether the operation has completed successfully.</value>
        </member>
        <member name="T:Realms.Sync.ManagementObjectStatus">
            <summary>
            The status of the management object as set by the server.
            </summary>
        </member>
        <member name="F:Realms.Sync.ManagementObjectStatus.NotProcessed">
            <summary>
            The server hasn't yet processed the request.
            </summary>
        </member>
        <member name="F:Realms.Sync.ManagementObjectStatus.Success">
            <summary>
            The server has processed the request successfully.
            </summary>
        </member>
        <member name="F:Realms.Sync.ManagementObjectStatus.Error">
            <summary>
            There was an error while processing the request. See <see cref="P:Realms.Sync.IPermissionObject.StatusMessage"/> for more details.
            </summary>
        </member>
        <member name="T:Realms.Sync.PathPermission">
            <summary>
            This model is used to reflect permissions granted to a user.
            It should be used in conjunction with a <see cref="T:Realms.Sync.User"/>'s Permission Realm.
            </summary>
            <see cref="M:Realms.Sync.UserPermissionsExtensions.GetPermissionRealm(Realms.Sync.User)"/>
        </member>
        <member name="P:Realms.Sync.PathPermission.UpdatedAt">
            <summary>
            Gets when the object was updated the last time.
            </summary>
            <value>A <see cref="T:System.DateTimeOffset"/> indicating the last time the object has been updated.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.UserId">
            <summary>
            Gets the identity of the user affected by this permission.
            </summary>
            <value>The user identity.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.Path">
            <summary>
            Gets the relative path to the Realm on the server.
            </summary>
            <value>A relative path component.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.MayRead">
            <summary>
            Gets a value indicating whether the user inspecting that permission is allowed to read the Realm at the
            specified <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value><c>true</c> if reading is allowed, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.MayWrite">
            <summary>
            Gets a value indicating whether the user inspecting that permission is allowed to write to the Realm at the
            specified <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value><c>true</c> if writing is allowed, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.MayManage">
            <summary>
            Gets a value indicating whether the user inspecting that permission is allowed to manage the permissions for
            the Realm at the specified <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value><c>true</c> if managing is allowed, <c>false</c> otherwise.</value>
        </member>
        <member name="T:Realms.Sync.ProgressDirection">
            <summary>
            The transfer direction (upload or download) tracked by a given progress notification subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressDirection.Upload">
            <summary>
            Monitors upload progress.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressDirection.Download">
            <summary>
            Monitors download progress.
            </summary>
        </member>
        <member name="T:Realms.Sync.ProgressMode">
            <summary>
            The desired behavior of a progress notification subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressMode.ReportIndefinitely">
            <summary>
            The callback will be called forever, or until it is unregistered by disposing the subscription token.
            Notifications will always report the latest number of transferred bytes, and the most up-to-date number of
            total transferable bytes.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressMode.ForCurrentlyOutstandingWork">
            <summary>
            The callback will, upon registration, store the total number of bytes to be transferred. When invoked, it will
            always report the most up-to-date number of transferable bytes out of that original number of transferable bytes.
            When the number of transferred bytes reaches or exceeds the number of transferable bytes, the callback will
            be unregistered.
            </summary>
        </member>
        <member name="T:Realms.Sync.SyncProgress">
            <summary>
            A struct containing information about the progress state at a given instant.
            </summary>
        </member>
        <member name="P:Realms.Sync.SyncProgress.TransferredBytes">
            <summary>
            Gets the number of bytes that have been transferred since subscribing for progress notifications.
            </summary>
            <value>The number of transferred bytes.</value>
        </member>
        <member name="P:Realms.Sync.SyncProgress.TransferableBytes">
            <summary>
            Gets the total number of bytes that have to be transferred since subscribing for progress notifications.
            The difference between that number and <see cref="P:Realms.Sync.SyncProgress.TransferredBytes"/> gives you the number of bytes not yet
            transferred. If the difference is 0, then all changes at the instant the callback fires have been
            successfully transferred.
            </summary>
            <value>The number of transferable bytes.</value>
        </member>
        <member name="T:Realms.Sync.AccessLevel">
            <summary>
            Access levels which can be granted to Realm Platform users for specific synchronized Realms, using the permissions APIs.
            <br/>
            Note that each access level guarantees all allowed actions provided by less permissive access levels.
            Specifically, users with write access to a Realm can always read from that Realm, and users with administrative
            access can always read or write from the Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.AccessLevel.None">
            <summary>
            No access whatsoever.
            </summary>
        </member>
        <member name="F:Realms.Sync.AccessLevel.Read">
            <summary>
            User can only read the contents of the Realm.
            </summary>
            <remarks>
            Users who have read-only access to a Realm should open the Realm using
            <see cref="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase)"/> Attempting to directly open the Realm is
            an error; in this case the Realm must be deleted and re-opened.
            </remarks>
        </member>
        <member name="F:Realms.Sync.AccessLevel.Write">
            <summary>
            User can read and write the contents of the Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.AccessLevel.Admin">
            <summary>
            User can read, write, and administer the Realm, including granting permissions to other users.
            </summary>
        </member>
        <member name="T:Realms.Sync.Recipient">
            <summary>
            The user affected by the permission change.
            </summary>
        </member>
        <member name="F:Realms.Sync.Recipient.Any">
            <summary>
            Any user - either current or someone else.
            </summary>
        </member>
        <member name="F:Realms.Sync.Recipient.CurrentUser">
            <summary>
            The current user.
            </summary>
        </member>
        <member name="F:Realms.Sync.Recipient.OtherUser">
            <summary>
            User other than the current one.
            </summary>
        </member>
        <member name="T:Realms.Sync.PermissionCondition">
            <summary>
            A class describing the condition based on which permissions will be applied.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionCondition.UserId(System.String)">
            <summary>
            Apply permissions based on the user's Id.
            </summary>
            <returns>A <see cref="T:Realms.Sync.PermissionCondition"/> containing information about the user's Id.</returns>
            <param name="userId">The Id of the user.</param>
        </member>
        <member name="P:Realms.Sync.PermissionCondition.Default">
            <summary>
            Gets a <see cref="T:Realms.Sync.PermissionCondition"/> that describes the default permissions for all users
            who don't have explicit permissions applied. The <see cref="T:Realms.Sync.AccessLevel"/> granted alongside
            this condition will also be used as default access level for future new users.
            </summary>
            <remarks>
            The default permissions are not additive with more specific permissions, even if the latter
            are more restrictive - for example, a user who has been granted <see cref="F:Realms.Sync.AccessLevel.Read"/>
            access will not be write to a Realm, even if the default permissions grant <see cref="F:Realms.Sync.AccessLevel.Write"/>
            access.
            </remarks>
        </member>
        <member name="M:Realms.Sync.PermissionCondition.Email(System.String)">
            <summary>
            Apply permissions based on the user's Email when using the username/password login provider.
            </summary>
            <returns>A <see cref="T:Realms.Sync.PermissionCondition"/> containing information about the user's email.</returns>
            <param name="email">The email (username) of the user that will be affected by this condition.</param>
        </member>
        <member name="M:Realms.Sync.PermissionCondition.KeyValue(System.String,System.String)">
            <summary>
            Apply permissions based on a key/value combination in the user's metadata.
            </summary>
            <returns>
            A <see cref="T:Realms.Sync.PermissionCondition"/> containing information about the key/value combination that will be used
            for matching against.
            </returns>
            <param name="key">The metadata key to look for.</param>
            <param name="value">The metadata value that must match the key.</param>
        </member>
    </members>
</doc>
